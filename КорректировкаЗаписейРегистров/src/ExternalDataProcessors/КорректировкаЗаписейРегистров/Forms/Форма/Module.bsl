#Область ОписаниеПеременных

&НаСервере
Перем КэшКартинок;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьНастройкиПоУмолчанию();

	СоздатьКолонкиИРеквизиты();
	ЗаполнитьОтборы();

	ЗаполнитьСписокРегистров();

	УстановитьОформлениеЭлементов();

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	Если Не ЗначениеЗаполнено(ПолноеИмяРегистра) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не выбран регистр";
		Сообщение.Поле = "Регистр"; //имя реквизита 
		Сообщение.Сообщить();
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	Если ОтборПоРегистратору И Не ЗначениеЗаполнено(Регистратор) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не заполнен регистратор";
		Сообщение.Поле = "Регистратор"; //имя реквизита 
		Сообщение.Сообщить();

		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РегистрАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	СписокВыбора = Элементы.ПолноеИмяРегистра.СписокВыбора;

	РегистрАвтоПодборНаСервере(Текст, ДанныеВыбора, СписокВыбора);

КонецПроцедуры

&НаКлиенте
Процедура РегистрПриИзменении(Элемент)

	НаборЗаписейПрочитан = Ложь;
	Модифицированность = Ложь;
	НастроитьЭлементыФормыПоРегистру();
	ЗаполнитьОтборы();
	УстановитьОформлениеЭлементов();
	Элементы.ГруппаОтборы.Показать();

КонецПроцедуры

&НаКлиенте
Процедура РегистраторПриИзменении(Элемент)

	НаборЗаписейПрочитан = Ложь;
	УстановитьОформлениеЭлементов();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтборы

&НаКлиенте
Процедура ОтборыПриИзменении(Элемент)

	НаборЗаписейПрочитан = Ложь;
	УстановитьОформлениеЭлементов();

КонецПроцедуры

&НаКлиенте
Процедура ОтборыПриАктивизацииСтроки(Элемент)

	ТекущиеДанные = Элементы.Отборы.ТекущиеДанные;

	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Элементы.ОтборыЗначение.ОграничениеТипа = ОграничениеТипаЭлемента(ТекущиеДанные.Измерение);

КонецПроцедуры

&НаКлиенте
Процедура ОтборыЗначениеПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Отборы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Не ТекущиеДанные.Использовать Тогда
		ТекущиеДанные.Использовать = Истина;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаНаборЗаписей

&НаКлиенте
Процедура ТаблицаНаборЗаписейПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТаблицаНаборЗаписейПриНачалеРедактированияНаСервере(НоваяСтрока, Копирование);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Прочитать(Команда)

	ОчиститьСообщения();

	Если ПроверитьЗаполнение() Тогда
		ПрочитатьНаСервере();
		НаборЗаписейПрочитан = Истина;
		Элементы.ТаблицаНаборЗаписей.Видимость = Истина;
		Модифицированность = Ложь;

		Если СворачиватьНастройкиОтборовПриЧтенииНабора Тогда
			Элементы.ГруппаОтборы.Скрыть();
		КонецЕсли;
	КонецЕсли;

	УстановитьОформлениеЭлементов();

КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)

	ОчиститьСообщения();

	Если ПроверитьЗаполнение() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаписатьЗавершение", ЭтотОбъект);

		Если БезопасныйРежим Тогда
			Если ТаблицаНаборЗаписей.Количество() = 0 Тогда
				ТекстВопроса = "Набор записей пуст. Действительно хотите очистить регистр с заданными отборами?";
			Иначе
				ТекстВопроса = "Вы действительно хотите записать набор записей по заданным отборам?";
			КонецЕсли;

			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Иначе
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗначенияОтборами(Команда)
	ЗаполнитьЗначенияОтборамиНаСервере();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВключениеОтключениеБезопасногоРежима(Команда)
	БезопасныйРежим = Не БезопасныйРежим;
	УстановитьОформлениеЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущееЗначениеДляВсехЗаписей(Команда)

	УстановитьТекущееЗначениеДляВсехЗаписейНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьРегистраторПоСсылке(Команда)

	ОписаниеОповещения = Новый ОписаниеОповещения("ВводСсылкиЗавершение", ЭтотОбъект);
	ПоказатьВводСтроки(ОписаниеОповещения, ,
		"Введите строку, полученную с помощью команды ""Получить ссылку"" (Ctrl+F11)", , Истина);

КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаборЗаписей(Команда)

	ОчиститьСообщения();

	Если Не ЗначениеЗаполнено(ПолноеИмяРегистра) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не выбран регистр";
		Сообщение.Сообщить();

		Возврат;
	КонецЕсли;

	ДополнительныеПараметры = Новый Структура("ИсточникНабораЗаписей", "Форма");

	ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьНаборЗаписейЗавершение", ЭтотОбъект,
		ДополнительныеПараметры);

	Если Модифицированность И БезопасныйРежим Тогда
		ПоказатьПредупреждение(
			ОписаниеОповещения,
			"Набор записей был изменен. В файл будет сохранен набор записей до изменения (произойдет чтение из БД).");
	Иначе
		СохранитьНаборЗаписейЗавершение(ДополнительныеПараметры);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьТекущийНаборЗаписей(Команда)

	ОчиститьСообщения();

	Если Не ЗначениеЗаполнено(ПолноеИмяРегистра) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не выбран регистр";
		Сообщение.Сообщить();

		Возврат;
	КонецЕсли;

	ДополнительныеПараметры = Новый Структура("ИсточникНабораЗаписей", "ИБ");

	СохранитьНаборЗаписейЗавершение(ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНаборЗаписей(Команда)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СохраненныеНаборыЗаписей", СохраненныеНаборыЗаписей);

	ОписаниеОповещения = Новый ОписаниеОповещения("ВосстановлениеНаборЗаписейЗавершение", ЭтотОбъект);

	ОткрытьФорму(
		"ВнешняяОбработка.КорректировкаЗаписейРегистров.Форма.ФормаВосстановленияНабораЗаписей", ПараметрыФормы,
		ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Инициализация

&НаСервере
Процедура ЗаполнитьСписокРегистров()

	Элементы.ПолноеИмяРегистра.СписокВыбора.Очистить();

	КоллекцииОбъектовМетаданных = Новый Массив;
	КоллекцииОбъектовМетаданных.Добавить(Метаданные.РегистрыСведений);
	КоллекцииОбъектовМетаданных.Добавить(Метаданные.РегистрыНакопления);
	КоллекцииОбъектовМетаданных.Добавить(Метаданные.РегистрыРасчета);
	
	//КоллекцииОбъектовМетаданных.Добавить(Метаданные.РегистрыБухгалтерии);

	Для Каждого КоллекцияОбъектовМетаданных Из КоллекцииОбъектовМетаданных Цикл
		Для Каждого ОбъектМетаданных Из КоллекцияОбъектовМетаданных Цикл
			ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
			Представление = ОбъектМетаданных.Представление();
			Элементы.ПолноеИмяРегистра.СписокВыбора.Добавить(ПолноеИмя, Представление + " (" + ПолноеИмя + ")",
				СтрНачинаетсяС(ВРег(ОбъектМетаданных.Имя), "УДАЛИТЬ"), ОпределитьКартинкуРегистра(ОбъектМетаданных));
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СоздатьКолонкиИРеквизиты()
	
	// Создаем реквизиты

	ДобавляемыеРеквизиты = Новый Массив;

	Для НомерКолонки = 1 По МаксимальноеКоличествоКолонок Цикл
		КолонкаН = Новый РеквизитФормы(НаименованиеЭлементаКолонка(НомерКолонки), Новый ОписаниеТипов(""),
			"ТаблицаНаборЗаписей", , Истина);
		КолонкаН_Используется = Новый РеквизитФормы(НаименованиеРеквизитаИспользуется(НомерКолонки),
			Новый ОписаниеТипов("Булево"));
		КолонкаН_ИмяРеквизита = Новый РеквизитФормы(НаименованиеРеквизитаИмяРеквизита(НомерКолонки),
			Новый ОписаниеТипов("Строка"));

		ДобавляемыеРеквизиты.Добавить(КолонкаН);
		ДобавляемыеРеквизиты.Добавить(КолонкаН_Используется);
		ДобавляемыеРеквизиты.Добавить(КолонкаН_ИмяРеквизита);
	КонецЦикла;

	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	// Добавляем элементы формы

	Для НомерКолонки = 1 По МаксимальноеКоличествоКолонок Цикл
		Элемент = Элементы.Добавить(НаименованиеЭлементаКолонка(НомерКолонки), Тип("ПолеФормы"),
			Элементы.ТаблицаНаборЗаписей);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным = "ТаблицаНаборЗаписей." + НаименованиеЭлементаКолонка(НомерКолонки);
		Элемент.Видимость = Ложь;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиПоУмолчанию()

	АвтоматическиОпределятьМаксимальноеКоличествоКолонок = Истина; // Если Истина, то будет произведен поиск по всем регистрам по метаданным
	МаксимальноеКоличествоКолонокБезАвтоматическогоОпределения = 40;
	БезопасныйРежим = Истина;
	СворачиватьНастройкиОтборовПриЧтенииНабора = Истина;
	ОбменДаннымиЗагрузка = Ложь;
	СохранятьНаборЗаписейПередЗаписью = Истина; // Автоматическое сохранение набора записей во временном хранилище, пока жива форма
	ИспользоватьСинонимРеквизитаКакЗаголовок = Истина; // Если Истина, то используется Синоним, если Ложь, то Имя
	ИспользоватьКартинкиШапкиКолонок = Ложь;

	МаксимальноеКоличествоКолонок = МаксимальноеКоличествоКолонок(АвтоматическиОпределятьМаксимальноеКоличествоКолонок,
		МаксимальноеКоличествоКолонокБезАвтоматическогоОпределения);

КонецПроцедуры

#КонецОбласти

#Область Форма

&НаСервере
Процедура УстановитьОформлениеЭлементов()

	ПолноеИмяРегистраЗаполнено = ЗначениеЗаполнено(ПолноеИмяРегистра);

	Если Элементы.ТаблицаНаборЗаписей.Видимость <> ПолноеИмяРегистраЗаполнено Тогда
		Элементы.ТаблицаНаборЗаписей.Видимость = ПолноеИмяРегистраЗаполнено;
	КонецЕсли;

	Если Элементы.ГруппаЗапись.Доступность <> ПолноеИмяРегистраЗаполнено Тогда
		Элементы.ГруппаЗапись.Доступность = ПолноеИмяРегистраЗаполнено;
	КонецЕсли;

	Элементы.Записать.КнопкаПоУмолчанию = НаборЗаписейПрочитан;
	Элементы.Записать.Доступность = НаборЗаписейПрочитан Или Не БезопасныйРежим;

	Элементы.Прочитать.КнопкаПоУмолчанию = Не НаборЗаписейПрочитан;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура РегистрАвтоПодборНаСервере(Текст, ДанныеВыбора, СписокВыбора)

	ДлинаСтрокиПоиска = СтрДлина(Текст);

	ДанныеВыбора = Новый СписокЗначений;
	
	// Нет смысла искать по 1-2 символам
	Если ДлинаСтрокиПоиска < 3 Тогда
		Возврат;
	КонецЕсли;

	Для Каждого ЭлементСписка Из СписокВыбора Цикл
		ПозицияНайденногоТекстаВПредставлении = СтрНайти(ВРег(ЭлементСписка.Представление), ВРег(Текст));

		Если ПозицияНайденногоТекстаВПредставлении > 0 Тогда
			Представление = ЭлементСписка.Представление;
			
			// Выделяем зеленым цветом найденный текст
			Представление = Новый ФорматированнаяСтрока(Лев(Представление, ПозицияНайденногоТекстаВПредставлении - 1),
				Новый ФорматированнаяСтрока(Сред(Представление, ПозицияНайденногоТекстаВПредставлении,
				ДлинаСтрокиПоиска), Новый Шрифт(, , Истина), WebЦвета.Зеленый), Сред(Представление,
				ПозицияНайденногоТекстаВПредставлении + ДлинаСтрокиПоиска));

			ДанныеВыбора.Добавить(ЭлементСписка.Значение, Представление, ЭлементСписка.Пометка, ЭлементСписка.Картинка);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ОпределитьКартинкуРегистра(ОбъектМетаданных)

	Если КэшКартинок = Неопределено Тогда
		КэшКартинок = Новый Структура;

		КэшКартинок.Вставить("РегистрСведений", БиблиотекаКартинок.РегистрСведений);
		КэшКартинок.Вставить("РегистрБухгалтерии", БиблиотекаКартинок.РегистрБухгалтерии);
		КэшКартинок.Вставить("РегистрНакопления", БиблиотекаКартинок.РегистрНакопления);
		КэшКартинок.Вставить("РегистрРасчета", БиблиотекаКартинок.РегистрРасчета);
	КонецЕсли;

	Если Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда
		Возврат КэшКартинок.РегистрСведений;
	ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных) Тогда
		Возврат КэшКартинок.РегистрБухгалтерии;
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) Тогда
		Возврат КэшКартинок.РегистрНакопления;
	ИначеЕсли Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных) Тогда
		Возврат КэшКартинок.РегистрРасчета;
	КонецЕсли;

КонецФункции

// Возвращает описание типов из метаданных регистра.
//
// Параметры:
//  НаименованиеЭлементаМетаданных	 - Строка - Имя стандартного реквизита, измерения, ресурса или реквизита регистра
// 
// Возвращаемое значение:
//  ОписаниеТипов
//
&НаСервере
Функция ОграничениеТипаЭлемента(НаименованиеЭлементаМетаданных)

	Результат = Новый ОписаниеТипов("");

	ОбъектМетаданных = ОбъектМетаданных();

	Если ОбъектМетаданных = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;

	КоллекцииИзмеренийРеквизитовРесурсов = Новый Массив;
	КоллекцииИзмеренийРеквизитовРесурсов.Добавить(ОбъектМетаданных.СтандартныеРеквизиты);
	КоллекцииИзмеренийРеквизитовРесурсов.Добавить(ОбъектМетаданных.Измерения);
	КоллекцииИзмеренийРеквизитовРесурсов.Добавить(ОбъектМетаданных.Ресурсы);
	КоллекцииИзмеренийРеквизитовРесурсов.Добавить(ОбъектМетаданных.Реквизиты);

	ЭлементНайден = Ложь;

	Для Каждого Коллекция Из КоллекцииИзмеренийРеквизитовРесурсов Цикл
		Если ЭлементНайден Тогда
			Прервать;
		КонецЕсли;

		Для Каждого ЭлементКоллекции Из Коллекция Цикл
			Если ЭлементКоллекции.Имя = НаименованиеЭлементаМетаданных Тогда
				Результат = ЭлементКоллекции.Тип;
				ЭлементНайден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат Результат;

КонецФункции

&НаСервере
Процедура ЗаполнитьЗначенияОтборамиНаСервере()

	ДанныеДляЗаполнения = СформироватьДанныеДляЗаполненияПоУмолчанию();

	Для Каждого СтрокаТаблицы Из ТаблицаНаборЗаписей Цикл
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеДляЗаполнения);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтборы()

	Регистратор = Неопределено;
	Отборы.Очистить();

	Элементы.ГруппаОтборПоРегистратору.Видимость = Ложь;
	Элементы.Отборы.Видимость = Ложь;

	ОбъектМетаданных = ОбъектМетаданных();

	Если ОбъектМетаданных = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ЭтоРегистрСведений = Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных);
	ОтборПоРегистратору = Истина;

	Если ЭтоРегистрСведений И ОбъектМетаданных.РежимЗаписи
		= Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
		ОтборПоРегистратору = Ложь;
	КонецЕсли;

	Если ОтборПоРегистратору Тогда
		Элементы.ГруппаОтборПоРегистратору.Видимость = Истина;
		Элементы.Регистратор.ОграничениеТипа = ОграничениеТипаЭлемента("Регистратор");
	Иначе
		// Это регистр сведений, проверять не требуется
		ПериодическийРегистрСведений = ОбъектМетаданных.ПериодичностьРегистраСведений
			<> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический;

		Если ПериодическийРегистрСведений Тогда
			СтрокаОтбора = Отборы.Добавить();
			СтрокаОтбора.Измерение = "Период";
		КонецЕсли;

		Для Каждого ОбъектМетаданныхИзмерение Из ОбъектМетаданных.Измерения Цикл
			СтрокаОтбора = Отборы.Добавить();
			СтрокаОтбора.Измерение = ОбъектМетаданныхИзмерение.Имя;
			СтрокаОтбора.Использовать = Ложь;
		КонецЦикла;
	КонецЕсли;

	Элементы.Отборы.Видимость = Отборы.Количество() > 0;

КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормыПоРегистру()
	
	// Очищаем таблицу

	ТаблицаНаборЗаписей.Очистить();

	Для НомерКолонки = 1 По МаксимальноеКоличествоКолонок Цикл
		ИмяКолонки = НаименованиеЭлементаКолонка(НомерКолонки);
		ИмяРеквизитаИспользуется = НаименованиеРеквизитаИспользуется(НомерКолонки);

		Элементы[ИмяКолонки].Заголовок = "";
		Элементы[ИмяКолонки].АвтоОтметкаНезаполненного = Ложь;
		Элементы[ИмяКолонки].Видимость = Ложь;
		Элементы[ИмяКолонки].Доступность = Истина;

		ЭтотОбъект[ИмяРеквизитаИспользуется] = Ложь;
	КонецЦикла;

	Если Не ЗначениеЗаполнено(ПолноеИмяРегистра) Тогда
		Элементы.ТаблицаНаборЗаписей.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	// Устанавливаем значения для колонок по стандартным реквизитам, измерениям, ресурсам и реквизитам регистра
	ОбъектМетаданных = ОбъектМетаданных();

	Если ОбъектМетаданных = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ЭтоРегистрБухгалтерииСКорреспонденцией = ЭтоРегистрБухгалтерии(ОбъектМетаданных) И ОбъектМетаданных.Корреспонденция;

	КоллекцииИзмеренийРеквизитовРесурсов = Новый Структура;
	КоллекцииИзмеренийРеквизитовРесурсов.Вставить("СтандартныеРеквизиты", ОбъектМетаданных.СтандартныеРеквизиты);
	КоллекцииИзмеренийРеквизитовРесурсов.Вставить("Измерения", ОбъектМетаданных.Измерения);
	КоллекцииИзмеренийРеквизитовРесурсов.Вставить("Ресурсы", ОбъектМетаданных.Ресурсы);
	КоллекцииИзмеренийРеквизитовРесурсов.Вставить("Реквизиты", ОбъектМетаданных.Реквизиты);

	КартинкиШапки = Новый Структура;
	КартинкиШапки.Вставить("СтандартныеРеквизиты", БиблиотекаКартинок.Реквизит);
	КартинкиШапки.Вставить("Измерения", БиблиотекаКартинок.Измерение);
	КартинкиШапки.Вставить("Ресурсы", БиблиотекаКартинок.Ресурс);
	КартинкиШапки.Вставить("Реквизиты", БиблиотекаКартинок.Реквизит);

	НедоступныеДляЗаписиРеквизиты = НедоступныеДляЗаписиРеквизиты();

	НомерКолонки = 1;
	Для Каждого КлючИЗначение Из КоллекцииИзмеренийРеквизитовРесурсов Цикл
		Коллекция = КлючИЗначение.Значение;
		Набор = КлючИЗначение.Ключ;

		Для Каждого ЭлементКоллекции Из Коллекция Цикл

			Если ЭтоРегистрБухгалтерииСКорреспонденцией И (Набор = "Измерения" Или Набор = "Ресурсы") Тогда

				ВывестиРеквизитКоллекции(ЭлементКоллекции, НомерКолонки, КартинкиШапки[Набор],
					НедоступныеДляЗаписиРеквизиты, "Дт");
				НомерКолонки = НомерКолонки + 1;
				ВывестиРеквизитКоллекции(ЭлементКоллекции, НомерКолонки, КартинкиШапки[Набор],
					НедоступныеДляЗаписиРеквизиты, "Кт");

			Иначе

				ВывестиРеквизитКоллекции(ЭлементКоллекции, НомерКолонки, КартинкиШапки[Набор],
					НедоступныеДляЗаписиРеквизиты);

			КонецЕсли;

			НомерКолонки = НомерКолонки + 1;

		КонецЦикла;

	КонецЦикла;

	КоличествоКолонок = НомерКолонки - 1;

КонецПроцедуры

&НаСервере
Процедура ВывестиРеквизитКоллекции(ОписаниеРеквизита, НомерКолонки, Картинка, НедоступныеДляЗаписиРеквизиты,
	ДополнениеНаименованияРеквизита = "")

	ИмяКолонки = НаименованиеЭлементаКолонка(НомерКолонки);
	ИмяРеквизитаИспользуется = НаименованиеРеквизитаИспользуется(НомерКолонки);
	НаименованиеРеквизитаИмяРеквизита = НаименованиеРеквизитаИмяРеквизита(НомерКолонки);

	РеальноеИмяРеквизита = ОписаниеРеквизита.Имя + ?(ЗначениеЗаполнено(ДополнениеНаименованияРеквизита),
		ДополнениеНаименованияРеквизита, "");

	Если ИспользоватьСинонимРеквизитаКакЗаголовок Тогда
		Элементы[ИмяКолонки].Заголовок = ОписаниеРеквизита.Представление() + ?(ЗначениеЗаполнено(
			ДополнениеНаименованияРеквизита), " (" + ДополнениеНаименованияРеквизита + ")", "");
	Иначе
		Элементы[ИмяКолонки].Заголовок = РеальноеИмяРеквизита;
	КонецЕсли;
	Элементы[ИмяКолонки].Видимость = Истина;
	Элементы[ИмяКолонки].ОграничениеТипа = ОграничениеТипаЭлемента(РеальноеИмяРеквизита);

	Если ИспользоватьКартинкиШапкиКолонок Тогда
		Элементы[ИмяКолонки].КартинкаШапки = Картинка;
	КонецЕсли;

	ЭтотОбъект[ИмяРеквизитаИспользуется] = Истина;
	ЭтотОбъект[НаименованиеРеквизитаИмяРеквизита] = РеальноеИмяРеквизита;
	
	// Если для реквизита регистра устновлено свойство "Проверка заполнения" или "Запрет незаполненных", то таким выставим АвтоОтметкаНезаполненного;
	Если ЕстьРеквизитИлиСвойствоОбъекта(ОписаниеРеквизита, "ПроверкаЗаполнения") Тогда
		Элементы[ИмяКолонки].АвтоОтметкаНезаполненного = ОписаниеРеквизита.ПроверкаЗаполнения
			= ПроверкаЗаполнения.ВыдаватьОшибку;
	КонецЕсли;

	Если Элементы[ИмяКолонки].АвтоОтметкаНезаполненного = Ложь И ЕстьРеквизитИлиСвойствоОбъекта(ОписаниеРеквизита,
		"ЗапрещатьНезаполненныеЗначения") Тогда
		Элементы[ИмяКолонки].АвтоОтметкаНезаполненного = ОписаниеРеквизита.ЗапрещатьНезаполненныеЗначения;
	КонецЕсли;

	Если ОписаниеРеквизита.Имя = "ВидДвижения" Или ОписаниеРеквизита.Имя = "Период" Или ОписаниеРеквизита.Имя
		= "Регистратор" Тогда
		Элементы[ИмяКолонки].АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
	// Заполнение регистратора не требуется - при записи 1С сама проставит.
	Если ОписаниеРеквизита.Имя = "Регистратор" Тогда
		Элементы[ИмяКолонки].Видимость = Ложь;
	КонецЕсли; 
	
	// Недоступен для записи всегда
	Если НедоступныеДляЗаписиРеквизиты.Найти(ОписаниеРеквизита.Имя) <> Неопределено
		И НедоступныеДляЗаписиРеквизиты.Найти(РеальноеИмяРеквизита) <> Неопределено Тогда

		Элементы[ИмяКолонки].Доступность = Ложь;
	КонецЕсли;

КонецПроцедуры

// Возвращает имя стандартного реквизита, измерения, ресурса или реквизита, хранящегося в колонке НомерКолонки
//
// Параметры:
//  НомерКолонки - Число
// 
// Возвращаемое значение:
//  Строка
//
&НаСервере
Функция ИмяРеквизитаНаСервере(НомерКолонки)
	Возврат ЭтотОбъект["Колонка" + НомерКолонки + "_ИмяРеквизита"];
КонецФункции

// Возвращает Истина, если колонка используется
//
// Параметры:
//  НомерКолонки - Число
// 
// Возвращаемое значение:
//  Булево
//
&НаСервере
Функция КолонкаИспользуется(НомерКолонки)

	Возврат ЭтотОбъект["Колонка" + НомерКолонки + "_Используется"];

КонецФункции
 
// Имя элемента формы для таблицы, хранящего значения регистра
//
&НаСервереБезКонтекста
Функция НаименованиеЭлементаКолонка(НомерКолонки)

	Возврат "Колонка" + НомерКолонки;

КонецФункции

// Имя реквизиты формы, содержащего признак использования определенной колонки
//
&НаСервереБезКонтекста
Функция НаименованиеРеквизитаИспользуется(НомерКолонки)

	Возврат "Колонка" + НомерКолонки + "_Используется";

КонецФункции

// Имя реквизиты формы, содержащего имя стандартного реквизита, измерения, ресурса или реквизита регистра
//
&НаСервереБезКонтекста
Функция НаименованиеРеквизитаИмяРеквизита(НомерКолонки)

	Возврат "Колонка" + НомерКолонки + "_ИмяРеквизита";

КонецФункции

&НаСервере
Процедура УстановитьТекущееЗначениеДляВсехЗаписейНаСервере()

	ТекущиеДанные = Неопределено;

	ТекущаяСтрока = Элементы.ТаблицаНаборЗаписей.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущиеДанные = ТаблицаНаборЗаписей.НайтиПоИдентификатору(ТекущаяСтрока);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяКолонки = Элементы.ТаблицаНаборЗаписей.ТекущийЭлемент.Имя;

	Значение = ТекущиеДанные[ИмяКолонки];

	Для Каждого ИдентификаторСтрокиТаблицы Из Элементы.ТаблицаНаборЗаписей.ВыделенныеСтроки Цикл
		СтрокаТаблицы = ТаблицаНаборЗаписей.НайтиПоИдентификатору(ИдентификаторСтрокиТаблицы);
		СтрокаТаблицы[ИмяКолонки] = Значение;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ТаблицаНаборЗаписейПриНачалеРедактированияНаСервере(НоваяСтрока, Копирование)

	ТекущаяСтрока = Элементы.ТаблицаНаборЗаписей.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущиеДанные = ТаблицаНаборЗаписей.НайтиПоИдентификатору(ТекущаяСтрока);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если НоваяСтрока Тогда
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, СформироватьДанныеДляЗаполненияПоУмолчанию());
	КонецЕсли;

	Если НоваяСтрока Или Копирование Тогда
		НедоступныеДляЗаписиРеквизиты = НедоступныеДляЗаписиРеквизиты();

		Для НомерКолонки = 1 По КоличествоКолонок Цикл
			Если НедоступныеДляЗаписиРеквизиты.Найти(ИмяРеквизитаНаСервере(НомерКолонки)) <> Неопределено Тогда
				ТекущиеДанные[НаименованиеЭлементаКолонка(НомерКолонки)] = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВосстановлениеНаборЗаписейЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	ОчиститьСообщения();

	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	ПолноеИмяРегистра = РезультатЗакрытия.ПолноеИмяРегистра;

	Если Не ЗначениеЗаполнено(ПолноеИмяРегистра) Тогда
		ПолноеИмяРегистра = ОпределитьПолноеИмяРегистраСохраненногоНабораЗаписей(
			РезультатЗакрытия.АдресВоВременномХранилище);
	КонецЕсли;

	НаборЗаписейПрочитан = Истина;

	НастроитьЭлементыФормыПоРегистру();
	ЗаполнитьОтборы();
	УстановитьОформлениеЭлементов();

	ВосстановитьСохраненныйНаборЗаписей(РезультатЗакрытия.АдресВоВременномХранилище);

	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Набор записей восстановлен на форме, но не записан. Проверьте, и нажмите ""Записать"".";
	Сообщение.Сообщить();

КонецПроцедуры

&НаКлиенте
Процедура ВводСсылкиЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;

	Ссылка = ПолучитьСсылкуНаОбъектИзНавигационнойСсылки(Результат);

	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось разобрать навигационную ссылку";
		Сообщение.Сообщить();

		Возврат;
	КонецЕсли;

	Если Не Элементы.Регистратор.ОграничениеТипа.СодержитТип(ТипЗнч(Ссылка)) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон("Объект типа ""%1"" не является регистратором выбранного регистра.", ТипЗнч(Ссылка));
		Сообщение.Сообщить();

		Возврат;
	КонецЕсли;

	Регистратор = Ссылка;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаборЗаписейЗавершение(ДополнительныеПараметры) Экспорт

	АдресВоВременномХранилище = СоздатьРезервнуюКопиюНабораЗаписей( , ДополнительныеПараметры.ИсточникНабораЗаписей);

	ПараметрыДиалогаПолученияФайлов = Новый ПараметрыДиалогаПолученияФайлов;
	ПараметрыДиалогаПолученияФайлов.Заголовок = "Резервная копия набора записей";

	НачатьПолучениеФайлаССервера(АдресВоВременномХранилище, "РезервнаяКопия_" + СтрЗаменить(ПолноеИмяРегистра, ".",
		"_") + ".xml", ПараметрыДиалогаПолученияФайлов);

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	Если Результат = КодВозвратаДиалога.Да Тогда

		Если СохранятьНаборЗаписейПередЗаписью Тогда
			СоздатьРезервнуюКопиюНабораЗаписей(Истина);
		КонецЕсли;

		ЗаписатьНаСервере();

		ПрочитатьНаСервере();

	КонецЕсли;

	Модифицированность = Ложь;

КонецПроцедуры

#КонецОбласти

#Область ЧтениеЗаписьНабораЗаписей

// Создает набор записей выбранного регистра и устанавливает используемые отборы
// Не выполняет чтение набора.
//
// Возвращаемое значение:
//  РегистрСведенийНаборЗаписей,
//  РегистрНакопленияНаборЗаписей,
//  РегистрБухгалтерииНаборЗаписей,
//  РегистрРасчетаНаборЗаписей 
//
&НаСервере
Функция СоздатьНаборЗаписейСОтборами()

	МенеджерОбъекта = МенеджерОбъекта();

	НаборЗаписей = МенеджерОбъекта.СоздатьНаборЗаписей();

	Если ОтборПоРегистратору Тогда
		НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
	Иначе
		Для Каждого СтрокаОтбора Из Отборы Цикл
			Если Не СтрокаОтбора.Использовать Тогда
				Продолжить;
			КонецЕсли;

			НаборЗаписей.Отбор[СтрокаОтбора.Измерение].Установить(СтрокаОтбора.Значение);
		КонецЦикла;
	КонецЕсли;

	Возврат НаборЗаписей;

КонецФункции

// Производит чтение выбранного регистра по заданным отборам и помещает результат в таблицу на форме
//
&НаСервере
Процедура ПрочитатьНаСервере()

	ТаблицаНаборЗаписей.Очистить();

	НаборЗаписей = СоздатьНаборЗаписейСОтборами();

	НаборЗаписей.Прочитать();

	НаборЗаписейВТаблицуФормы(НаборЗаписей);

КонецПроцедуры

// Производит запись таблицы в выбранный регистр с заданными отборами.
// Вызывает исключения.
//
&НаСервере
Процедура ЗаписатьНаСервере()

	НаборЗаписей = СоздатьНаборЗаписейСОтборами();

	НаборЗаписей.ОбменДанными.Загрузка = ОбменДаннымиЗагрузка;

	ТаблицаФормыВНаборЗаписей(НаборЗаписей);

	НаборЗаписей.Записать();

КонецПроцедуры

// В зависимости от источника создает набор записей, сериализует в XML и помещает во временное хранилище
//
// Параметры:
//  ЗапомнитьАдрес			 - Булево - если Истина, то сохраняет адрес во временном хранилище в СохраненныеНаборыЗаписей для восстановления
//  ИсточникНабораЗаписей	 - Строка - ИБ - набор записей по заданным отборам читается из ИБ; Форма - наор записи читается из формы (текущий набор записей)
// 
// Возвращаемое значение:
//  Строка - АдресВоВременномХранилище - адрес сериализованного набора записей в .xml во временном хранилище
//
&НаСервере
Функция СоздатьРезервнуюКопиюНабораЗаписей(ЗапомнитьАдрес = Ложь, ИсточникНабораЗаписей = "ИБ")

	НаборЗаписей = СоздатьНаборЗаписейСОтборами();

	Если Врег(ИсточникНабораЗаписей) = "ИБ" Тогда
		НаборЗаписей.Прочитать();
	ИначеЕсли ВРег(ИсточникНабораЗаписей) = "ФОРМА" Тогда
		ТаблицаФормыВНаборЗаписей(НаборЗаписей);
	Иначе
		ВызватьИсключение "Неверный параметр источник набора записей " + ИсточникНабораЗаписей;
	КонецЕсли;

	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".xml");

	ЗначениеXML = ЗначениеВСтрокуXML(НаборЗаписей);

	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаТекста.UTF8);
	ЗаписьТекста.Записать(ЗначениеXML);
	ЗаписьТекста.Закрыть();

	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла),
		Новый УникальныйИдентификатор);
		
	УдалитьФайлы(ИмяВременногоФайла);

	Если ЗапомнитьАдрес Тогда
		СтрокаСохраненныхНаборов = СохраненныеНаборыЗаписей.Добавить();
		СтрокаСохраненныхНаборов.ПолноеИмяРегистра = ПолноеИмяРегистра;
		СтрокаСохраненныхНаборов.АдресВоВременномХранилище = АдресВоВременномХранилище;
		СтрокаСохраненныхНаборов.ВремяСохранения = ТекущаяДатаСеанса();
	КонецЕсли;

	Возврат АдресВоВременномХранилище;

КонецФункции
  
// Заполняет переданный таблицу формы переданным набором записей 
//
// Параметры:
//  НаборЗаписей - РегистрСведенийНаборЗаписей, РегистрБухгалтерииНаборЗаписей, РегистрНакопленияНаборЗаписей, РегистрРасчетаНаборЗаписей - 
&НаСервере
Процедура НаборЗаписейВТаблицуФормы(НаборЗаписей)

	Для Каждого Запись Из НаборЗаписей Цикл
		НоваяСтрокаТаблицы = ТаблицаНаборЗаписей.Добавить();

		Для НомерКолонки = 1 По КоличествоКолонок Цикл
			ИмяКолонки = НаименованиеЭлементаКолонка(НомерКолонки);
			ИмяРеквизитаИмяРеквизита = НаименованиеРеквизитаИмяРеквизита(НомерКолонки);

			Если Не КолонкаИспользуется(НомерКолонки) Тогда
				Продолжить;
			КонецЕсли;

			НоваяСтрокаТаблицы[ИмяКолонки] = Запись[ЭтотОбъект[ИмяРеквизитаИмяРеквизита]];
		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

// Заполняет переданный набор записей данными из таблицы формы 
//
// Параметры:
//  НаборЗаписей - РегистрСведенийНаборЗаписей, РегистрБухгалтерииНаборЗаписей, РегистрНакопленияНаборЗаписей, РегистрРасчетаНаборЗаписей - 
//
&НаСервере
Процедура ТаблицаФормыВНаборЗаписей(НаборЗаписей)

	НедоступныеДляЗаписиРеквизиты = НедоступныеДляЗаписиРеквизиты();

	Для Каждого СтрокаТаблицы Из ТаблицаНаборЗаписей Цикл
		Запись = НаборЗаписей.Добавить();

		Для НомерКолонки = 1 По КоличествоКолонок Цикл
			Если Не КолонкаИспользуется(НомерКолонки) Тогда
				Продолжить;
			КонецЕсли;

			ИмяРеквизита = ЭтотОбъект[НаименованиеРеквизитаИмяРеквизита(НомерКолонки)];

			Если НедоступныеДляЗаписиРеквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;

			Запись[ИмяРеквизита] = СтрокаТаблицы[НаименованиеЭлементаКолонка(НомерКолонки)];
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

// Восстанавливает набор записей из сериализованного значения на форму
//
// Параметры:
//  АдресВоВременномХранилище - Строка 
//
&НаСервере
Процедура ВосстановитьСохраненныйНаборЗаписей(АдресВоВременномХранилище)

	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	СтрокаXML = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанные);
	НаборЗаписей = ЗначениеИзСтрокиXML(СтрокаXML);

	НаборЗаписейВТаблицуФормы(НаборЗаписей);

	Для Каждого Отбор Из НаборЗаписей.Отбор Цикл

		Если Не Отбор.Использование Тогда
			Продолжить;
		КонецЕсли;

		Если Отбор.Имя = "Регистратор" Тогда
			ОтборПоРегистратору = Истина;
			Регистратор = Отбор.Значение;
			Продолжить;
		КонецЕсли;

		Для Каждого СтрокаТаблицыОтборов Из Отборы Цикл
			Если СтрокаТаблицыОтборов.Измерение <> Отбор.Имя Тогда
				Продолжить;
			КонецЕсли;

			СтрокаТаблицыОтборов.Значение = Отбор.Значение;
			СтрокаТаблицыОтборов.Использовать = Истина;
			Прервать;
		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ОпределитьПолноеИмяРегистраСохраненногоНабораЗаписей(АдресВоВременномХранилище)

	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	СтрокаXML = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанные);
	НаборЗаписей = ЗначениеИзСтрокиXML(СтрокаXML);

	Возврат НаборЗаписей.Метаданные().ПолноеИмя();

КонецФункции

#КонецОбласти 

// Содержит имена стандартных реквизитов, которые недоступны для редактирования программно.
// Ткже для них устанавливается недоступность на форме.
// 
// Возвращаемое значение:
//  Массив Из Строка 
//
&НаСервере
Функция НедоступныеДляЗаписиРеквизиты()

	ОбъектМетаданных = ОбъектМетаданных();

	Массив = Новый Массив;
	Массив.Добавить("НомерСтроки");

	Если ЭтоРегистрРасчета(ОбъектМетаданных) Тогда
		Массив.Добавить("ПериодДействия");
	КонецЕсли;

	Возврат Массив;

КонецФункции

&НаСервереБезКонтекста
Функция МаксимальноеКоличествоКолонок(ОпределятьАвтоматически = Истина, ФиксированноеЗначение = 40)

	Если Не ОпределятьАвтоматически Тогда
		Возврат ФиксированноеЗначение;
	КонецЕсли;

	МаксимальноеКоличествоКолонок = 0;

	Регистры = Новый Массив;
	Регистры.Добавить("РегистрыБухгалтерии");
	Регистры.Добавить("РегистрыСведений");
	Регистры.Добавить("РегистрыНакопления");
	Регистры.Добавить("РегистрыРасчета");
	Для Каждого ВидРегистра Из Регистры Цикл
		Для Каждого ОбъектМетаданных Из Метаданные[ВидРегистра] Цикл
			КоличествоКолонок = 0;
			КоличествоКолонок = КоличествоКолонок + ОбъектМетаданных.СтандартныеРеквизиты.Количество();
			КоличествоКолонок = КоличествоКолонок + ОбъектМетаданных.Измерения.Количество();
			КоличествоКолонок = КоличествоКолонок + ОбъектМетаданных.Ресурсы.Количество();
			КоличествоКолонок = КоличествоКолонок + ОбъектМетаданных.Реквизиты.Количество();

			Если КоличествоКолонок > МаксимальноеКоличествоКолонок Тогда
				МаксимальноеКоличествоКолонок = КоличествоКолонок;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат МаксимальноеКоличествоКолонок;

КонецФункции

// Возращает объект метаданных выбранного регистра на форме
// 
// Возвращаемое значение:
//  ОбъектМетаданных 
//
&НаСервере
Функция ОбъектМетаданных()

	Если Не ЗначениеЗаполнено(ПолноеИмяРегистра) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат Метаданные.НайтиПоПолномуИмени(ПолноеИмяРегистра);

КонецФункции

// Возращает менеджер объекта выбранонго регистра на форме
// 
// Возвращаемое значение:
//  РегистрСведенийМенеджер, РегистрБухгалтерииМенеджер, РегистрНакопленияМенеджер, РегистрРасчетаМенеджер - 
//
&НаСервере
Функция МенеджерОбъекта()

	ОбъектМетаданных = ОбъектМетаданных();

	Если ОбъектМетаданных = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	МенеджерОбъектов = Неопределено;

	Если ЭтоРегистрБухгалтерии(ОбъектМетаданных) Тогда
		МенеджерОбъектов = РегистрыБухгалтерии;
	ИначеЕсли ЭтоРегистрНакопления(ОбъектМетаданных) Тогда
		МенеджерОбъектов = РегистрыНакопления;
	ИначеЕсли ЭтоРегистрРасчета(ОбъектМетаданных) Тогда
		МенеджерОбъектов = РегистрыРасчета;
	ИначеЕсли ЭтоРегистрСведений(ОбъектМетаданных) Тогда
		МенеджерОбъектов = РегистрыСведений;
	КонецЕсли;

	Возврат МенеджерОбъектов[ОбъектМетаданных.Имя];

КонецФункции

&НаСервереБезКонтекста
Функция ЭтоРегистрСведений(ОбъектМетаданных)
	Возврат Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных);
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоРегистрНакопления(ОбъектМетаданных)
	Возврат Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных);
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоРегистрБухгалтерии(ОбъектМетаданных)
	Возврат Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных);
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоРегистрРасчета(ОбъектМетаданных)
	Возврат Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных);
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьРеквизитИлиСвойствоОбъекта(Объект, Свойство)

	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	Структура = Новый Структура(Свойство, УникальныйИдентификатор);
	ЗаполнитьЗначенияСвойств(Структура, Объект);

	Возврат Структура[Свойство] <> УникальныйИдентификатор;

КонецФункции

// Формирует структуру, где ключ это имя колонки на форме, а значение - значение используемого отбора
// Для удобства вызова ЗаполнитьЗначенияСвойств
// 
// Возвращаемое значение:
//  Структура 
//
&НаСервере
Функция СформироватьДанныеДляЗаполненияПоУмолчанию()

	ДанныеДляЗаполнения = Новый Структура;

	Если ОтборПоРегистратору Тогда
		Для НомерКолонки = 1 По КоличествоКолонок Цикл
			Если ИмяРеквизитаНаСервере(НомерКолонки) = "Регистратор" Тогда
				ДанныеДляЗаполнения.Вставить(НаименованиеЭлементаКолонка(НомерКолонки), Регистратор);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Отбор = Новый Структура("Использовать", Истина);
		ИспользующиесяОтборы = Отборы.НайтиСтроки(Отбор);

		Для Каждого СтрокаОтборов Из ИспользующиесяОтборы Цикл
			Для НомерКолонки = 1 По КоличествоКолонок Цикл
				Если ИмяРеквизитаНаСервере(НомерКолонки) = СтрокаОтборов.Измерение Тогда
					ДанныеДляЗаполнения.Вставить(НаименованиеЭлементаКолонка(НомерКолонки), СтрокаОтборов.Значение);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

	Для НомерКолонки = 1 По КоличествоКолонок Цикл
		ИмяРеквизита = ИмяРеквизитаНаСервере(НомерКолонки);
		ИмяКолонки = НаименованиеЭлементаКолонка(НомерКолонки);

		Если ИмяРеквизита = "Активность" Тогда
			ДанныеДляЗаполнения.Вставить(ИмяКолонки, Истина);
		ИначеЕсли ИмяРеквизита = "Сторно" Тогда
			ДанныеДляЗаполнения.Вставить(ИмяКолонки, Ложь);
		КонецЕсли;
	КонецЦикла;

	Возврат ДанныеДляЗаполнения;

КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеВСтрокуXML(Значение)

	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Значение, НазначениеТипаXML.Явное);

	Возврат ЗаписьXML.Закрыть();

КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеИзСтрокиXML(СтрокаXML)

	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);

	Возврат СериализаторXDTO.ПрочитатьXML(ЧтениеXML);

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСсылкуНаОбъектИзНавигационнойСсылки(НавигационнаяСсылка)

	ПерваяТочка = Найти(НавигационнаяСсылка, "e1cib/data/");
	ВтораяТочка = Найти(НавигационнаяСсылка, "?ref=");

	Если ПерваяТочка = 0 Или ВтораяТочка = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	ПредставлениеТипа   = Сред(НавигационнаяСсылка, ПерваяТочка + 11, ВтораяТочка - ПерваяТочка - 11);
	ШаблонЗначения = ЗначениеВСтрокуВнутр(ПредопределенноеЗначение(ПредставлениеТипа + ".ПустаяСсылка"));
	ЗначениеСсылки = СтрЗаменить(ШаблонЗначения, "00000000000000000000000000000000", Сред(НавигационнаяСсылка,
		ВтораяТочка + 5));

	Возврат ЗначениеИзСтрокиВнутр(ЗначениеСсылки);

КонецФункции

#КонецОбласти